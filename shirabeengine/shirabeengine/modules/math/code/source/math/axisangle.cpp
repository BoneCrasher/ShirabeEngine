#include "math/axisangle.h"

#define _USE_MATH_DEFINES
#include <cmath>

namespace Engine
{
    namespace Math
    {
        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::CAxisAngle()
			: Vector4D({ 0, 0, 0, 0 })
		{}
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::CAxisAngle(
                Vector3D   const &aAxis,
                value_type const &aPhi)
            : Vector4D({ aAxis.x(), aAxis.y(), aAxis.z(), aPhi })
		{}
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::CAxisAngle(CAxisAngle const& aOther)
            : Vector4D({ aOther })
        {}
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::CAxisAngle(
                value_type const& aX,
                value_type const& aY,
                value_type const& aZ,
                value_type const& aPhi)
            : Vector4D({ aX, aY, aZ, aPhi })
		{}
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::~CAxisAngle()
        {}
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        Vector3D const CAxisAngle::axis() const
        {
            return Vector3D({ x(), y(), z() });
        }
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        const CAxisAngle::value_type& CAxisAngle::phi() const
        {
            return mField[3];
        }
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        Vector3D const CAxisAngle::axis(
                value_type const& aX,
                value_type const& aY,
                value_type const& aZ)
        {
            this->x(aX);
            this->y(aY);
            this->z(aZ);
            return this->axis(); // Hope for copy elision to work... otherwise switch to move semantics.
        }
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        CAxisAngle::value_type const &CAxisAngle::phi(value_type const &aPhi)
        {
            return (mField[3] = aPhi);
        }
        //<-----------------------------------------------------------------------------

        //<-----------------------------------------------------------------------------
        //<
        //<-----------------------------------------------------------------------------
        Vector3D operator*(
                CAxisAngle const &aAxisAngle,
                Vector3D   const &aVector)
        {
            using Value_t = CAxisAngle::value_type;

			// Rodriguez rotation formula
			// v_rot = (cos(phi)*v + sin(phi)*cross(e, v) + (1 - cos(phi))*(dot(e, v)*e)
            Value_t  cos_phi   = cosf(aAxisAngle.phi());
            Value_t  sin_phi   = sinf(aAxisAngle.phi());
            Vector3D e         = aAxisAngle.axis();
            Value_t  dot_e_v   = dot(e, aVector);
            Vector3D cross_e_v = cross(e, aVector);

            return ((cos_phi * aVector) + (sin_phi * cross_e_v) + ((1 - cos_phi) * (dot_e_v * e)));
		}
        //<-----------------------------------------------------------------------------
	}
}
